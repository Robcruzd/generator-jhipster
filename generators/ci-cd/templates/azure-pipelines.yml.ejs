<%#
 Copyright 2013-2022 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>

trigger:
  - <%= BRANCH %>

variables:
  NODE_VERSION: <%= NODE_VERSION %>
  VM_IMAGE_NAME: "ubuntu-20.04"
  SPRING_OUTPUT_ANSI_ENABLED: NEVER
  SPRING_JPA_SHOW_SQL: false
  JHI_DISABLE_WEBPACK_LOGS: true
  NG_CLI_ANALYTICS: "false"
  JHI_E2E_HEADLESS: true

stages:
- stage: Test
  displayName: Test stage
  jobs:
  - job: Test
    pool:
      vmImage: $(VM_IMAGE_NAME)

    steps:
  <%_ if (!skipClient) { _%>
    #----------------------------------------------------------------------
    # Install all tools and check configuration
    #----------------------------------------------------------------------
    - task: NodeTool@0
      inputs:
        versionSpec: $(NODE_VERSION)
      displayName: 'TOOLS: install Node.js'
  <%_ } _%>
  <%_ if (cypressTests || protractorTests) {
    const commented = applicationTypeGateway ? '# ' : ''; _%>
    <%= commented %>- task: Bash@3
    <%= commented %>  inputs:
    <%= commented %>    targetType: 'inline'
    <%= commented %>    script: |
    <%= commented %>      wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    <%= commented %>      sudo apt install ./google-chrome-stable_current_amd64.deb
    <%= commented %>  displayName: 'TOOLS: install Chrome'
  <%_ } _%>
    #----------------------------------------------------------------------
    # Tests
    #----------------------------------------------------------------------
    - task: JavaToolInstaller@0
      inputs:
        versionSpec: <%= JAVA_VERSION %>
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'
      displayName: 'Change Java version'
  <%_ if (!skipClient) { _%>
    - task: Npm@1
      inputs:
        command: 'install'
      displayName: 'INSTALL: launch npm install'
  <%_ } _%>
  <%_ if (cicdIntegrationsSnyk) { _%>
    - script: |
        curl -Lo ./snyk $(curl -s https://api.github.com/repos/snyk/snyk/releases/latest | grep "browser_download_url.*snyk-linux" | cut -d ':' -f 2,3 | tr -d \" | tr -d ' ')
        chmod +x snyk
      displayName: 'INSTALL: Snyk CLI'
    - script: ./snyk test --all-projects || true
      displayName: 'CHECK: Snyk test'
      env:
        SNYK_TOKEN: $(SNYK_TOKEN)
    - script: ./snyk monitor --all-projects
      displayName: 'CHECK: Snyk monitor'
      env:
        SNYK_TOKEN: $(SNYK_TOKEN)
  <%_ } _%>
    <%_ if (!skipServer) { _%>
      <%_ if (buildToolMaven) { _%>
    - script: chmod +x mvnw
      <%_ } else if (buildToolGradle) { _%>
    - script: chmod +x gradlew
      <%_ } _%>
    - task: Npm@1
      inputs:
        command: 'custom'
        customCommand: ' run ci:backend:test'
      displayName: 'TESTS: backend'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        searchFolder: '$(Build.SourcesDirectory)/<%= buildDir %>test-results'
      condition: succeededOrFailed()
      displayName: 'TESTS: publish test results'
    <%_ } _%>
  <%_ if (!skipClient) { _%>
    - task: Npm@1
      inputs:
        command: 'custom'
        customCommand: ' run ci:frontend:test'
      displayName: 'TESTS: frontend'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(Build.SourcesDirectory)/<%= buildDir %>test-results/TESTS-results-jest.xml'
      condition: succeededOrFailed()
      displayName: 'TESTS: publish test results'
  <%_ } _%>
  <%_ if (!skipServer) { _%>
    - task: Npm@1
      inputs:
        command: 'custom'
        customCommand: ' run java:jar:prod'
      displayName: 'TESTS: packaging'
  <%_ } _%>
  <%_ if (cypressTests || protractorTests) {
      const commented = applicationTypeGateway ? '# ' : ''; _%>
    <%= commented %>- task: Npm@1
    <%= commented %>  inputs:
    <%= commented %>    command: 'custom'
    <%= commented %>    customCommand: ' run ci:e2e:package'
    <%= commented %>  displayName: 'E2E: Package'
    <%= commented %>- task: Npm@1
    <%= commented %>  inputs:
    <%= commented %>    command: 'custom'
    <%= commented %>    customCommand: ' run ci:e2e:prepare'
    <%= commented %>  displayName: 'E2E: Prepare'
    <%= commented %>- task: Npm@1
    <%= commented %>  inputs:
    <%= commented %>    command: 'custom'
    <%= commented %>    customCommand: ' run ci:e2e:run'
    <%= commented %>  displayName: 'E2E: Run'
    <%_ if(cypressTests) { _%>
    <%= commented %>  env:
    <%= commented %>    CYPRESS_ENABLE_RECORD: <%= cicdIntegrationsCypressDashboard %>
    <%= commented %>    CYPRESS_PROJECT_ID: $(CYPRESS_PROJECT_ID)
    <%= commented %>    CYPRESS_RECORD_KEY: $(CYPRESS_RECORD_KEY)
    <%= commented %>- task: PublishPipelineArtifact@1
    <%= commented %>  inputs:
    <%= commented %>    artifactName: 'cypress-screenshots'
    <%= commented %>    targetPath: '$(Build.SourcesDirectory)/<%= buildDir %>cypress/screenshots'
    <%= commented %>  condition: failed()
    <%= commented %>  displayName: 'E2E: Publish Cypress Screenshots'
    <%_ } _%>
    <%= commented %>- task: Npm@1
    <%= commented %>  inputs:
    <%= commented %>    command: 'custom'
    <%= commented %>    customCommand: ' run ci:e2e:teardown'
    <%= commented %>  displayName: 'E2E: Teardown'
  <%_ } _%>

<%_ if (deliverDeployAz && deliverTool!="artifactory") { _%>
- stage: Deliver
  displayName: Deliver stage
  jobs:
  - job: deliver
    displayName: publish artifact or docker
    pool:
      vmImage: $(VM_IMAGE_NAME)

    steps:

    - task: JavaToolInstaller@0
      inputs:
        versionSpec: <%= JAVA_VERSION %>
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'
      displayName: 'Change Java version'
    <%_ if (deliver=="jar" || deployService=="azws") { _%>
    - task: Npm@1
      inputs:
        command: 'custom'
        customCommand: ' run java:jar:prod'
      displayName: 'TESTS: packaging'

    - task: CopyFiles@2
      displayName: 'Copy Files to artifact staging directory'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        <%_ if (buildToolMaven) { _%>
        Contents: '**/target/*.jar'
        <%_ } else if (buildToolGradle) { _%>
        Contents: '**/build/libs/*.jar'
        <%_ } _%>
        TargetFolder: $(Build.ArtifactStagingDirectory)
    
    - upload: $(Build.ArtifactStagingDirectory)
      artifact: drop
    <%_ } else if (deliver=="docker" || deployService=="azwsc" || deployService=="aks") { _%>
    <%_ if (buildToolMaven) { _%>
    - script: chmod +x mvnw
    <%_ } else if (buildToolGradle) { _%>
    - script: chmod +x gradlew
    <%_ } _%>
    - task: Docker@2
      displayName: Login to Azure Container Registry
      inputs:
        command: login
        containerRegistry: $(CONTAINER_REGISTRY)
    <%_ if (buildToolMaven) { _%>
    - script: './mvnw package -Pprod verify jib:build -Djib.to.image=$(CONTAINER_REGISTRY)/$(IMAGE_REPOSITORY):$(TAG)'
      displayName: 'Build and package the application'
    <%_ } else if (buildToolGradle) { _%>
    - script: './gradlew jib -Pprod -Djib.to.image=$(CONTAINER_REGISTRY)/$(IMAGE_REPOSITORY):$(TAG)'
      displayName: 'Build and package the application'
    <%_ } _%>
    <%_ } _%>

<%_ if (azure=="deploy") { _%>
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Deliver
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(ENVIRONMENT_NAME)
    pool:
      vmImage: $(VM_IMAGE_NAME)
    strategy:
      runOnce:
        deploy:
          steps:
          <%_ if (deployService=="azws") { _%>
          - task: AzureWebApp@1
            displayName: 'Azure Web App Deploy: $(WEBAPP_NAME)'
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              appType: webAppLinux
              appName: $(WEBAPP_NAME)
              package: '$(Pipeline.Workspace)/drop/**/target/*.?(jar)'
          <%_ } else if (deployService=="azwsc") { _%>
          - task: AzureWebAppContainer@1
            displayName: 'Azure Web App on Container Deploy'
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION_SERVICE_CONNECTION)
              appName: $(WEBAPP_NAME)
              imageName: $(CONTAINER_REGISTRY)/$(IMAGE_REPOSITORY):$(TAG)
          <%_ } else if (deployService=="aks") { _%>
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(IMAGE_PULL_SECRET)
              dockerRegistryEndpoint: $(DOCKER_REGISTRY_SERVICE_CONNECTION)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(IMAGE_PULL_SECRET)
              containers: |
                $(CONTAINER_REGISTRY)/$(IMAGE_REPOSITORY):$(TAG)
          <%_ } _%>
<%_ } _%>
<%_ } _%>
