<%#
 Copyright 2013-2023 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
#!/usr/bin/env groovy

pipeline {
    agent any
    stages {
        stage('Build and Test') {
            steps {
                checkout scm
                <%_ if (buildToolMaven) { _%>
                sh "java -version"
                sh "chmod +x mvnw"
                sh "./mvnw -ntp clean -P-webapp"
                sh "./mvnw -ntp checkstyle:check"
                <%_ if (!skipClient) { _%>
                sh "./mvnw -ntp com.github.eirslett:frontend-maven-plugin:install-node-and-npm@install-node-and-npm"
                sh "./mvnw -ntp com.github.eirslett:frontend-maven-plugin:npm"
                <%_ } _%>
                <%_ if (cicdIntegrationsSnyk) { _%>
                sh """
                    curl -Lo ./snyk $(curl -s https://api.github.com/repos/snyk/snyk/releases/latest | grep "browser_download_url.*snyk-linux" | cut -d ':' -f 2,3 | tr -d \" | tr -d ' ')
                    chmod +x snyk
                """
                sh './snyk test --all-projects'
                sh './snyk monitor --all-projects'
                <%_ } _%>
                sh "./mvnw -ntp verify -P-webapp"
                junit '**/target/surefire-reports/TEST-*.xml,**/target/failsafe-reports/TEST-*.xml'
                sh "./mvnw -ntp com.github.eirslett:frontend-maven-plugin:<%= clientPackageManager %> -Dfrontend.<%= clientPackageManager %>.arguments='run <%= frontTestCommand %>'"
                junit '**/target/test-results/TESTS-results-jest.xml'
                <%_ } else if (buildToolGradle) { _%>
                sh "chmod +x gradlew"
                sh "./gradlew clean --no-daemon"
                sh "./gradlew checkstyleNohttp --no-daemon"
                <%_ if (!skipClient) { _%>
                sh "./gradlew <%= clientPackageManager %>_install -PnodeInstall --no-daemon"
                <%_ } _%>
                <%_ if (cicdIntegrationsSnyk) { _%>
                sh """
                    curl -Lo ./snyk $(curl -s https://api.github.com/repos/snyk/snyk/releases/latest | grep "browser_download_url.*snyk-linux" | cut -d ':' -f 2,3 | tr -d \" | tr -d ' ')
                    chmod +x snyk
                """
                sh './snyk test --all-projects'
                sh './snyk monitor --all-projects'
                <%_ } _%>
                sh "./gradlew test integrationTest -PnodeInstall --no-daemon"
                junit '**/build/**/TEST-*.xml'
                <%_ if (!skipClient) { _%>
                sh "./gradlew <%= clientPackageManager %>_run_<%= frontTestCommand %> -PnodeInstall --no-daemon"
                junit '**/build/test-results/TESTS-*.xml'
                <%_ } _%>
                <%_ } _%>
                <%_ if (cicdIntegrationsSonar) { _%>
                withSonarQubeEnv('<%= sonarName %>') {
                <%_ if (buildToolMaven) { _%>
                sh "./mvnw -ntp initialize sonar:sonar"
                <%_ } else if (buildToolGradle) { _%>
                sh "./gradlew sonarqube --no-daemon"
                <%_ } _%>
                }
                <%_ } _%>
            }
        }

        <%_ if (deliverDeploy && deliverTool!="heroku") { _%>
        stage('Deliver') {
            steps {
                script {
                    checkout scm
                    <%_ if (buildToolMaven) { _%>
                    sh "chmod +x mvnw"
                    <%_ } else if (buildToolGradle) { _%>
                    sh "chmod +x gradlew"
                    <%_ } _%>
                    <%_ if (deliver=="jar" || deployService=="azws") { _%>
                    <%_ if (buildToolMaven) { _%>
                    sh "./mvnw -ntp verify -P-webapp -Pprod -DskipTests"
                    stash name: 'jar', includes: '**/target/*.jar'
                    <%_ } else if (buildToolGradle) { _%>
                    sh "./gradlew bootJar -x test -Pprod -PnodeInstall --no-daemon"
                    archiveArtifacts artifacts: '**/build/libs/*.jar', fingerprint: true
                    <%_ } _%>
                    <%_ } else if (deliver=="docker" || deployService=="azwsc" || deployService=="aks") { _%>
                    <%_ if (buildToolMaven) { _%>
                    sh "echo \$CONTAINER_REGISTRY_PASSWORD | docker login \$CONTAINER_REGISTRY --username \$CONTAINER_REGISTRY_USERNAME --password-stdin"
                    sh "./mvnw package -Pprod verify jib:build -Djib.to.image=\$CONTAINER_REGISTRY/\$IMAGE_REPOSITORY:\$BUILD_NUMBER"
                    <%_ } else if (buildToolGradle) { _%>
                    sh "./gradlew jib -Pprod -Djib.to.image=\$CONTAINER_REGISTRY/\$IMAGE_REPOSITORY:\$BUILD_NUMBER"
                    <%_ } _%>
                    <%_ } _%>
                }
            }
        }

        <%_ if (azure=="deploy") { _%>
        stage('Deploy') {
            agent any
            steps {
                checkout scm
                sh "az login --service-principal --username \$AZURE_CLIENT_ID --password \$AZURE_CLIENT_SECRET --tenant \$AZURE_TENANT_ID"
                <%_ if (deployService=="azws") { _%>
                unstash 'jar'
                sh "az webapp deploy --resource-group \"\$AZURE_RESOURCE_GROUP\" --name \"\$AZURE_APP_NAME\" --src-path $(find . -name \"<%= baseName %>*.jar\") --type jar --verbose"
                <%_ } else if (deployService=="azwsc") { _%>
                sh "az webapp create --resource-group \"\$AZURE_RESOURCE_GROUP\" --plan \"\$AZURE_APP_SERVICE_PLAN\" --name \"\$AZURE_APP_NAME\" --deployment-container-image-name \"\$CONTAINER_REGISTRY/\$IMAGE_REPOSITORY:\$BUILD_NUMBER\""
                <%_ } else if (deployService=="aks") { _%>
                sh "echo \"\${CONTAINER_REGISTRY_PASSWORD}\" | docker login --username \${CONTAINER_REGISTRY_USERNAME} --password-stdin \${CONTAINER_REGISTRY}"
                sh "az login --service-principal --username \$AZURE_CLIENT_ID --password \$AZURE_CLIENT_SECRET --tenant \$AZURE_TENANT_ID"
                sh "az aks get-credentials --resource-group \"\$AZURE_RESOURCE_GROUP\" --name \"\$CLUSTER_NAME\""
                sh '''
                    kubectl apply -f deployment.yml -f service.yml
                    kubectl set image deployment/$DEPLOYMENT_APP_NAME $CONTAINER_REGISTRY_USERNAME=$CONTAINER_REGISTRY/$IMAGE_REPOSITORY:$BUILD_NUMBER
                '''
                <%_ } _%>
                sh 'az logout'
            }
        }
        <%_ } _%>
        <%_ } else if (deliverDeploy && deliverTool=="heroku") { _%>
        stage('Package and deploy') {
            agent any
            steps {
                <%_ if (buildToolMaven) { _%>
                sh "./mvnw -ntp com.heroku.sdk:heroku-maven-plugin:2.0.5:deploy -DskipTests -Pprod -Dheroku.buildpacks=heroku/jvm -Dheroku.appName=<%= herokuAppName %>"
                <%_ } else if (buildToolGradle) { _%>
                sh "./gradlew deployHeroku --no-daemon"
                <%_ } _%>
            }
        }
        <%_ } _%>
    }

    when {
        branch '<%= BRANCH %>'
    }
}