<%#
 Copyright 2013-2023 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
name: Application CI
on: 
  push:
    branches:
      - <%= BRANCH %>
  pull_request:
    branches:
      - <%= BRANCH %>
env:
<%_ if (!skipClient) { _%>
    NODE_VERSION: <%= nodeVersion %>
<%_ } _%>
<%_ if (!skipServer) { _%>
    SPRING_OUTPUT_ANSI_ENABLED: DETECT
<%_ }
if (!databaseTypeNo && !skipServer ) { _%>
    SPRING_JPA_SHOW_SQL: false
<%_ } _%>
<%_ if (!skipClient) { _%>
    JHI_DISABLE_WEBPACK_LOGS: true
<%_ } _%>
<%_ if (clientFrameworkAngular) { _%>
    NG_CLI_ANALYTICS: false
<%_ } _%>
<%_ if (enableGradleEnterprise) { _%>
    GRADLE_ENTERPRISE_ACCESS_KEY: ${{secrets.GRADLE_ENTERPRISE_ACCESS_KEY}}
<%_ } _%>
    TAG: ${{ github.run_number }}
jobs:
<%_ if (buildToolGradle) { _%>
    validation:
        name: "Gradle Wrapper Validation"
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - uses: gradle/wrapper-validation-action@v1
<%_ } _%>
    test:
        name: <%= baseName %> test
        runs-on: ubuntu-latest
        if: "!contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.pull_request.title, '[skip ci]') && !contains(github.event.pull_request.title, '[ci skip]')"
        timeout-minutes: 40
        steps:
            - uses: actions/checkout@v3
<%_ if (!skipClient) { _%>
            - uses: actions/setup-node@v3
              with:
                  node-version: <%= nodeVersion %>
<%_ }
if (!skipServer) { _%>
            - uses: actions/setup-java@v3
              with:
                  distribution: 'temurin'
                  java-version: <%= JAVA_VERSION %>
<%_ }
if (!skipClient) { _%>
            - name: Install node.js packages
              run: <%= clientPackageManager %> install
<%_ } _%>
<%_ if (cicdIntegrationsSnyk) { _%>
            - name: Install Snyk CLI
              run: |
                  curl -Lo ./snyk $(curl -s https://api.github.com/repos/snyk/snyk/releases/latest | grep "browser_download_url.*snyk-linux" | cut -d ':' -f 2,3 | tr -d \" | tr -d ' ')
                  chmod +x snyk
            - name: Snyk test
              continue-on-error: true
              run: ./snyk test --all-projects
              env:
                  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
            - name: Snyk monitor
              continue-on-error: true
              run: ./snyk monitor --all-projects
              env:
                  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
<%_ } _%>
<%_ if (!skipServer) { _%>
            - name: Run backend test
              run: |
    <%_ if (buildToolMaven) { _%>
                  chmod +x mvnw
    <%_ } else if (buildToolGradle) { _%>
                  chmod +x gradlew
    <%_ } _%>
                  <%= clientPackageManager %> run ci:backend:test
    <%_ if (!skipClient) { _%>
            - name: Run frontend test
              run: <%= clientPackageManager %> run ci:frontend:test
    <%_ } _%>
<%_ } _%>
<%_ if (cicdIntegrationsSonar) { _%>
            - name: Analyze code with SonarQube
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              run: |
                  if [ ! -z "$SONAR_TOKEN" ]; then
    <%_ if (buildToolMaven) { _%>
                      ./mvnw -ntp initialize sonar:sonar <% if (sonarOrga) { %>-Dsonar.organization=<%= sonarOrga %> <% } %>-Dsonar.host.url=<%= sonarUrl %>
    <%_ } else if (buildToolGradle) { _%>
                      ./gradlew sonarqube --no-daemon <% if (sonarOrga) { %>-Dsonar.organization=<%= sonarOrga %> <% } %>-Dsonar.host.url=<%= sonarUrl %>
    <%_ } _%>
                  else
                      echo No SONAR_TOKEN, skipping...
                  fi
<%_ } _%>
<%_ if (cicdIntegrationsPublishDocker) { _%>
            - name: Build and publish docker image
              if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
              run: |
                  GIT_TAG=:${GITHUB_REF#refs/tags/}
                  DOCKER_TAG=${GIT_TAG#:refs/heads/main}
    <%_ if (buildToolMaven) { _%>
                  ./mvnw -ntp jib:build -Djib.to.image=<%= dockerImage %>${DOCKER_TAG} -Djib.to.auth.username="${{ secrets.DOCKER_USERNAME }}" -Djib.to.auth.password="${{ secrets.DOCKER_PASSWORD }}" -Pprod
    <%_ } else if (buildToolGradle) { _%>
                  ./gradlew jib -Djib.to.image=<%= dockerImage %>${DOCKER_TAG} -Djib.to.auth.username="${{ secrets.DOCKER_USERNAME }}" -Djib.to.auth.password="${{ secrets.DOCKER_PASSWORD }}" -Pprod
    <%_ } _%>
<%_ } _%>
<%_ if (cypressTests) {
  const commented = applicationTypeGateway ? '# ' : ''; _%>
            <%= commented %>- name: 'E2E: Package'
            <%= commented %>  run: <%= clientPackageManager %> run ci:e2e:package
            <%= commented %>- name: 'E2E: Prepare'
            <%= commented %>  run: <%= clientPackageManager %> run ci:e2e:prepare
            <%= commented %>- name: 'E2E: Run'
            <%= commented %>  run: <%= clientPackageManager %> run ci:e2e:run
    <%_ if(cypressTests) { _%>
            <%= commented %>  env:
            <%= commented %>    CYPRESS_ENABLE_RECORD: <%= cicdIntegrationsCypressDashboard %>
            <%= commented %>    CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}
            <%= commented %>    CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
    <%_ } _%>
            <%= commented %>- name: 'E2E: Teardown'
            <%= commented %>  run: <%= clientPackageManager %> run ci:e2e:teardown
<%_ } _%>

<%_ if (deliverDeploy && deliverTool!="artifactory") { _%>
    deliver:
        needs: test
        runs-on: ubuntu-latest
        steps:
        - name: Checkout code
          uses: actions/checkout@v3
        - name: Maven Package
          uses: actions/setup-java@v3
          with:
            distribution: 'temurin'
            java-version: <%= JAVA_VERSION %>
      <%_ if (deliver=="jar" || deployService=="azws") { _%>
        - name: Package application
          run: <%= clientPackageManager %> run java:jar:prod
        - name: Publish Artifact
          uses: actions/upload-artifact@v3
          with:
            name: drop
            <%_ if (buildToolMaven) { _%>
            path: ${{ github.workspace }}/target/*.jar
            <%_ } else if (buildToolGradle) { _%>
            path: ${{ github.workspace }}/build/libs/*.jar
            <%_ } _%>
      <%_ } else if (deliver=="docker" || deployService=="azwsc" || deployService=="aks") { _%>
        - name: Login to Azure Container Registry
          uses: azure/docker-login@v1
          with:
            login-server: ${{ secrets.CONTAINER_REGISTRY }}
            username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
            password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
        - name: Permissions to mvnw
        <%_ if (buildToolMaven) { _%>
          run: chmod +x mvnw
        <%_ } else if (buildToolGradle) { _%>
          run: chmod +x gradlew
        <%_ } _%>
        - name: Build and package the application
        <%_ if (buildToolMaven) { _%>
          run: ./mvnw package -Pprod verify jib:build -Djib.to.image=${{ secrets.CONTAINER_REGISTRY }}/${{ secrets.IMAGE_REPOSITORY }}:${{ env.TAG }}
        <%_ } else if (buildToolGradle) { _%>
          run: ./gradlew jib -Pprod -Djib.to.image=${{ secrets.CONTAINER_REGISTRY }}/${{ secrets.IMAGE_REPOSITORY }}:${{ env.TAG }}
        <%_ } _%>
      <%_ } _%>

    <%_ if (azure=="deploy") { _%>
    deploy:
        needs: deliver
        runs-on: ubuntu-latest
        steps:
        <%_ if (cicdIntegrationsHeroku) { _%>
          - name: Deploy to Heroku
            if: github.event_name == 'push' && github.ref == 'refs/heads/main'
            env:
                HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
            run: |
                if [ ! -z "$HEROKU_API_KEY" ]; then
          <%_ if (buildToolMaven) { _%>
                    ./mvnw -ntp com.heroku.sdk:heroku-maven-plugin:2.0.5:deploy -DskipTests -Pprod -Dheroku.buildpacks=heroku/jvm -Dheroku.appName=<%= herokuAppName %>
          <%_ } else if (buildToolGradle) { _%>
                    ./gradlew deployHeroku --no-daemon
          <%_ } _%>
                else
                    echo No HEROKU_API_KEY, skipping...
                fi
        <%_ } _%>
        <%_ if (deployService=="aks") { _%>
          - name: Checkout code
            uses: actions/checkout@v3
        <%_ } _%>
        <%_ if (deployService=="azws") { _%>
          - name: Download Artifact
            uses: actions/download-artifact@v3
            with:
              name: drop
        <%_ } _%>
        <%_ if (deliverTool=="azure") { _%>
          - name: Login Azure
            uses: azure/login@v1
            with:
              creds: ${{ secrets.CREDS_AZURE_APP }}
        <%_ } _%>
        <%_ if (deployService=="azws") { _%>
          - name: Azure Web App Deploy <%= baseName %>
            uses: azure/webapps-deploy@v2
            with:
              app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
              package: '*.jar'
              publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        <%_ } _%>
        <%_ if (deployService=="azwsc") { _%>
          - name: Azure Web App on Container Deploy 
            uses: azure/webapps-deploy@v2
            with:
              app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
              images: ${{ secrets.CONTAINER_REGISTRY }}/${{ secrets.IMAGE_REPOSITORY }}:${{ env.TAG }}
        <%_ } _%>
        <%_ if (deployService=="aks") { _%>
          - name: Set AKS context
            id: set-context
            uses: azure/aks-set-context@v3
            with:
              resource-group: '${{ secrets.RESOURCE_GROUP }}' 
              cluster-name: '${{ secrets.CLUSTER_NAME }}'
          - name: Setup kubectl
            id: install-kubectl
            uses: azure/setup-kubectl@v3
          - name: Deploy to AKS
            id: deploy-aks
            uses: Azure/k8s-deploy@v4
            with:
              working-directory: ${{ github.workspace }}
              namespace: 'default'
              manifests: |
                ../manifests/deployment.yml
                ../manifests/service.yml
              images: ${{ secrets.CONTAINER_REGISTRY }}/${{ secrets.IMAGE_REPOSITORY }}:${{ env.TAG }}
              pull-images: false 
        <%_ } _%>
        <%_ if (deliverTool=="azure") { _%>
          - name: Azure logout
            run: az logout
        <%_ } _%>
      <%_ } _%>
<%_ } _%>
    