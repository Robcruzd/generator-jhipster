<%#
 Copyright 2013-2023 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
version: 2.1
jobs:
    build_test:
        machine:
            image: ubuntu-2004:current
        resource_class: large
        steps:
            - checkout
            # Download and cache dependencies
            - restore_cache:
                keys:
                    <%_ if (buildToolMaven) { _%>
                    - v1-dependencies-{{ checksum "pom.xml" }}-{{ checksum "package-lock.json" }}
                    <%_ } else if (buildToolGradle) { _%>
                    - v1-dependencies-{{ checksum "build.gradle" }}-{{ checksum "package-lock.json" }}
                    <%_ } _%>
                    # Perform a Partial Cache Restore (https://circleci.com/docs/2.0/caching/#restoring-cache)
                    - v1-dependencies-
            - run:
                name: Install Java <%= JAVA_VERSION %>
                command: |
                    sudo apt-get update && sudo apt-get install -y openjdk-<%= JAVA_VERSION %>-jdk
            - run:
                name: Set Java <%= JAVA_VERSION %> as default
                command: sudo update-alternatives --set java /usr/lib/jvm/java-<%= JAVA_VERSION %>-openjdk-amd64/bin/java
          
            - run:
                name: Print Java Version
                command: 'java -version'
            - run:
                name: Print Node Version
                command: 'node -v'
            - run:
                name: Print NPM Version
                command: 'npm -v'
            - run:
                name: Install Node Modules
                command: 'npm install'
            <%_ if (cicdIntegrationsSnyk) { _%>
            - run:
                name: Install Snyk CLI
                command: |
                    curl -Lo ./snyk $(curl -s https://api.github.com/repos/snyk/snyk/releases/latest | grep "browser_download_url.*snyk-linux" | cut -d ':' -f 2,3 | tr -d \" | tr -d ' ')
                    chmod +x snyk
            - run:
                name: Snyk test
                command: './snyk test --all-projects || true'
            - run:
                name: Snyk monitor
                command: './snyk monitor --all-projects'
            <%_ } _%>
            - save_cache:
                paths:
                    - node
                    - node_modules
                    <%_ if (buildToolMaven) { _%>
                    - ~/.m2
                    <%_ } else if (buildToolGradle) { _%>
                    - ~/.gradle
                    <%_ } _%>
                    <%_ if (buildToolMaven) { _%>
                key: v1-dependencies-{{ checksum "pom.xml" }}-{{ checksum "package-lock.json" }}
                    <%_ } else if (buildToolGradle) { _%>
                key: v1-dependencies-{{ checksum "build.gradle" }}-{{ checksum "package-lock.json" }}
                    <%_ } _%>

            - run:
                name: Give Executable Power
            <%_ if (buildToolMaven) { _%>
                command: 'chmod +x mvnw'
            <%_ } else if (buildToolGradle) { _%>
                command: 'chmod +x gradlew'
            <%_ } _%>
            - run:
                name: Backend tests
                command: <%= clientPackageManager %> run ci:backend:test
            <%_ if (!skipClient) { _%>
            - run:
                name: Run Front End Tests
                command: <%= clientPackageManager %> run ci:frontend:test
            <%_ } _%>
            
            <%_ if (cypressTests) {
                const commented = '# '; _%>
            <%= commented %>- run:
            <%= commented %>    name: 'E2E: Package'
            <%= commented %>    command: <%= clientPackageManager %> run ci:e2e:package
            <%= commented %>- run:
            <%= commented %>    name: 'E2E: Prepare'
            <%= commented %>    command: <%= clientPackageManager %> run ci:e2e:prepare
            <%= commented %>- run:
            <%= commented %>    name: 'E2E: Run'
            <%= commented %>    command: <%= clientPackageManager %> run ci:e2e:run
            <%_ if(cypressTests) { _%>
            <%= commented %>    environment:
            <%= commented %>      CYPRESS_ENABLE_RECORD: <%= cicdIntegrationsCypressDashboard %>
            <%_ } _%>
            <%= commented %>- run:
            <%= commented %>    name: 'E2E: Teardown'
            <%= commented %>    command: <%= clientPackageManager %> run ci:e2e:teardown
            <%_ } _%>

    <%_ if (deliverDeploy && deliverTool!="heroku") { _%>
    
    deliver:
        machine:
            image: ubuntu-2004:current
        steps:
            - checkout
            - run:
                name: Install Java <%= JAVA_VERSION %>
                command: |
                    sudo apt-get update && sudo apt-get install -y openjdk-<%= JAVA_VERSION %>-jdk
            - run:
                name: Give Executable Power
            <%_ if (buildToolMaven) { _%>
                command: 'chmod +x mvnw'
            <%_ } else if (buildToolGradle) { _%>
                command: 'chmod +x gradlew'
            <%_ } _%>
            <%_ if (deliver=="jar" || deployService=="azws") { _%>
            - run: 
                name: Generate JAR
                command: |
                    export JAVA_HOME=/usr/lib/jvm/java-<%= JAVA_VERSION %>-openjdk-amd64/
                    npm run java:jar:prod
            - persist_to_workspace:
                root: .
                paths:
                    <%_ if (buildToolMaven) { _%>
                    - target/*.jar
                    <%_ } else if (buildToolGradle) { _%>
                    - build/libs/*.jar
                    <%_ } _%>
                    
            - store_artifacts:
                <%_ if (buildToolMaven) { _%>
                path: target/*.jar
                <%_ } else if (buildToolGradle) { _%>
                path: build/libs/*.jar
                <%_ } _%>
            <%_ } else if (deliver=="docker" || deployService=="azwsc" || deployService=="aks") { _%>
            - run:
                name: Login to Azure Container Registry
                command: |
                    echo $CONTAINER_REGISTRY_PASSWORD | docker login $CONTAINER_REGISTRY --username $CONTAINER_REGISTRY_USERNAME --password-stdin
            - run:
                name: Build and package the application
                command: |
                <%_ if (buildToolMaven) { _%>
                    ./mvnw package -Pprod verify jib:build -Djib.to.image=$CONTAINER_REGISTRY/$IMAGE_REPOSITORY:$CIRCLE_WORKFLOW_ID
                <%_ } else if (buildToolGradle) { _%>
                    ./gradlew -Pprod bootJar jib -Djib.to.image=$CONTAINER_REGISTRY/$IMAGE_REPOSITORY:$CIRCLE_WORKFLOW_ID
                <%_ } _%>
            <%_ } _%>
    
    <%_ if (azure=="deploy") { _%>
    deploy:
        <%_ if (deployService=="aks") { _%>
        machine:
            image: ubuntu-2004:current
        <%_ } else if(deployService=="azws" || deployService=="azwsc") { _%>
        docker:
            - image: "mcr.microsoft.com/azure-cli"
        <%_ } _%>
        steps:
            <%_ if (deployService=="aks") { _%>
            - checkout
            - run:
                name: Install az y kubectl
                command: |
                  curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
                  curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
                  chmod +x ./kubectl
                  sudo mv ./kubectl /usr/local/bin/kubectl
            - run:
                name: Login container
                command: echo "${CONTAINER_REGISTRY_PASSWORD}" | docker login --username ${CONTAINER_REGISTRY_USERNAME} --password-stdin ${CONTAINER_REGISTRY}      
            <%_ } else if(deployService=="azws" || deployService=="azwsc") { _%>
            - attach_workspace:
                at: .
            <%_ } _%>
            - run:
                name: Authenticate with Azure
                command: |
                    az login --service-principal --username $AZURE_CLIENT_ID --password $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
            <%_ if (deployService=="aks") { _%>
            - run:
                name: Set AKS context
                command: az aks get-credentials --resource-group "$AZURE_RESOURCE_GROUP" --name "$CLUSTER_NAME"
            - run:
                name: Deploy to AKS
                command: |
                    kubectl apply -f ./manifests/deployment.yml -f ./manifests/service.yml
                    kubectl set image deployment/$DEPLOYMENT_APP_NAME $CONTAINER_REGISTRY_USERNAME=$CONTAINER_REGISTRY/$IMAGE_REPOSITORY:$CIRCLE_WORKFLOW_ID
            <%_ } else if (deployService=="azws") { _%>
            - run:
                name: Deploy to Azure
                command: |
                    az webapp deploy --resource-group $RESOURCE_GROUP --name $APP_SERVICE_NAME --src-path $(find . -name "*.jar") --type jar --verbose
            <%_ } else if(deployService=="azwsc") { _%>
            - run:
                name: Azure Web App on Container Deploy
                command: az webapp create --resource-group "$AZURE_RESOURCE_GROUP" --plan "$AZURE_APP_SERVICE_PLAN" --name "$AZURE_APP_NAME" --deployment-container-image-name "$CONTAINER_REGISTRY/$IMAGE_REPOSITORY:$CIRCLE_WORKFLOW_ID"
            <%_ } _%>
            - run:
                name: Azure logout
                command: az logout
    <%_ } _%>
    <%_ } else if (deliverDeploy && deliverTool=="heroku") { _%>
    deploy:
        machine:
            image: ubuntu-2004:current
        steps:
        <%_ if (buildToolMaven) { _%>
            <%_ if (cicdIntegrationsHeroku) { _%>
            - run:
                name: Deploy to Heroku
                command: './mvnw -ntp com.heroku.sdk:heroku-maven-plugin:2.0.5:deploy -DskipTests -Pprod -Dheroku.buildpacks=heroku/jvm -Dheroku.appName=<%= herokuAppName %>'
            <%_ } _%>
        <%_ } else if (buildToolGradle) { _%>
            <%_ if (cicdIntegrationsHeroku) { _%>
            - run:
                name: Deploy to Heroku
                command: './gradlew deployHeroku --no-daemon'
            <%_ } _%>
        <%_ } _%>
    <%_ } _%>
    

workflows:
    version: 2
    sample:
    jobs:
        - build_test:
            filters:
                branches:
                    only:
                        - <%= BRANCH %>
        <%_ if (deliverDeployAz) { _%>
        - deliver:
            filters:
                branches:
                    only:
                        - <%= BRANCH %>
        <%_ if (azure=="deploy") { _%>
        - deploy:
            requires:
                - deliver
            filters:
                branches:
                    only:
                        - <%= BRANCH %>
        <%_ } _%>
        <%_ } _%>